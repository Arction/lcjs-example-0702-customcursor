(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const i=s(475),{createProgressiveTraceGenerator:o}=s(27),{lightningChart:a,AutoCursorModes:l,UIElementBuilders:n,UILayoutBuilders:r,UIOrigins:c,translatePoint:u,Themes:g}=i,d=a().ChartXY({}).setAutoCursorMode(l.disabled).setTitle("Custom Cursor using LCJS UI");d.getDefaultAxisY().setTitle("Y-axis");const x=new Array(3).fill(0).map(((e,t)=>d.addLineSeries({dataPattern:{pattern:"ProgressiveX"}})));Promise.all(x.map((e=>o().setNumberOfPoints(200).generate().toPromise().then((t=>{e.add(t)}))))).then((()=>{d.forEachAxis((e=>e.fit(!1))),requestAnimationFrame((()=>{h({x:.4*window.innerWidth,y:window.innerHeight/2})}))})),d.addLegendBox().add(d);const m=d.addUIElement(r.Column,{x:d.getDefaultAxisX(),y:d.getDefaultAxisY()}).setMouseInteractions(!1).setOrigin(c.LeftBottom).setMargin(5).setBackground((e=>e.setFillStyle(d.getTheme().cursorResultTableFillStyle).setStrokeStyle(d.getTheme().cursorResultTableStrokeStyle))),y=m.addElement(r.Row).addElement(n.TextBox),b=x.map(((e,t)=>m.addElement(r.Row).addElement(n.TextBox).setTextFillStyle(x[t].getStrokeStyle().getFillStyle()))),f=d.getDefaultAxisX().addCustomTick(n.PointableTextBox).setAllocatesAxisSpace(!1),S=x.map(((e,t)=>d.getDefaultAxisY().addCustomTick(n.PointableTextBox).setAllocatesAxisSpace(!1).setMarker((e=>e.setTextFillStyle(x[t].getStrokeStyle().getFillStyle())))));m.setVisible(!1),f.setVisible(!1),S.forEach((e=>e.setVisible(!1)));const h=e=>{const t=u(e,d.engine.scale,x[0].scale),s=x.map((t=>t.solveNearestFromScreen(e))),i=s.reduce(((e,s,i)=>e?s&&Math.abs(t.y-s.location.y)<Math.abs(t.y-e.location.y)?s:e:s));i?(m.setPosition({x:i.location.x,y:i.location.y}),i.location.x>d.getDefaultAxisX().getInterval().end/1.5?i.location.y>d.getDefaultAxisY().getInterval().end/1.5?m.setOrigin(c.RightTop):m.setOrigin(c.RightBottom):i.location.y>d.getDefaultAxisY().getInterval().end/1.5?m.setOrigin(c.LeftTop):m.setOrigin(c.LeftBottom),y.setText(`X: ${d.getDefaultAxisX().formatValue(i.location.x)}`),b.map(((e,t)=>{e.setText(`Y${t}: ${d.getDefaultAxisY().formatValue(s[t].location.y)}`)})),f.setValue(i.location.x),S.forEach(((e,t)=>{e.setValue(s[t].location.y||0)})),m.setVisible(!0),f.setVisible(!0),S.map((e=>e.setVisible(!0)))):(m.setVisible(!1),f.setVisible(!1),S.map((e=>e.setVisible(!1))))},T=(e,t)=>{const s={x:t.clientX,y:t.clientY},i=d.engine.clientLocation2Engine(s.x,s.y);h(i)};d.onSeriesBackgroundMouseMove(T),x.forEach((e=>{e.onMouseMove(T)})),d.onSeriesBackgroundMouseLeave(((e,t)=>{m.setVisible(!1),f.setVisible(!1),S.map((e=>e.setVisible(!1)))})),d.onSeriesBackgroundMouseDragStart(((e,t)=>{m.setVisible(!1),f.setVisible(!1),S.map((e=>e.setVisible(!1)))}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);